generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
     id        Int   @id @default(autoincrement())
    name      String?
    email     String?  @unique
    password  String?

    role      UserRole @default(USER)

    provider   String?
    providerId String?

    cart Cart?
    orders Order[]
    verificationCode VerificationCode?
    verified DateTime @default(now())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id        Int   @id @default(autoincrement())
    name String
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id        Int   @id @default(autoincrement())
    name String
    imageUrl String
    description String

    items ProductItem[]

    category Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id        Int   @id @default(autoincrement())
    name String

    price Int
    size Int?

    product Product @relation(fields: [productId], references: [id])
    productId Int   

    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
     id        Int   @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int? @unique

    totalPrice Int @default(0)

    token String

    items CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
     id        Int   @id @default(autoincrement())

    cart Cart? @relation(fields: [cartId], references: [id])
    cartId Int?

    productItem ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    quantity Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
     id        Int   @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalPrice Int

    status OrderStatus
    paymentId String?

    items Json 

    name String
    address String
    phone String
    email String
    comment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
     id        Int   @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    IN_PROGRESS
    DELIVERED
    CANCELED
}

enum UserRole {
    USER
    ADMIN
}